// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var cheerio, cleaner, extractor, getCleanedDoc, getParsedDoc, getTopNode, unfluff;
  cheerio = require('cheerio');
  extractor = require('./extractor');
  cleaner = require('./cleaner');
  module.exports = unfluff = function (html, language) {
    var doc, lng, pageData, topNode, url;
    doc = cheerio.load(html);
    lng = language || extractor.lang(doc);
    url = extractor.canonicalLink(doc) || extractor.favicon(doc);
    pageData = {
      title: extractor.title(doc, url),
      favicon: extractor.favicon(doc),
      description: extractor.description(doc),
      keywords: extractor.keywords(doc),
      lang: lng,
      canonicalLink: extractor.canonicalLink(doc),
      tags: extractor.tags(doc),
      image: extractor.image(doc, url)
    };
    cleaner(doc);
    topNode = extractor.calculateBestNode(doc, lng);
    pageData.videos = extractor.videos(doc, topNode);
    pageData.text = extractor.text(doc, topNode, lng);
    return pageData;
  };
  unfluff.lazy = function (html, language) {
    return {
      title: function () {
        var doc, url;
        doc = getParsedDoc.call(this, html);
        url = extractor.canonicalLink(doc) || extractor.favicon(doc);
        return null != this.title_ ? this.title_ : this.title_ = extractor.title(doc, url);
      },
      favicon: function () {
        var doc;
        doc = getParsedDoc.call(this, html);
        return null != this.favicon_ ? this.favicon_ : this.favicon_ = extractor.favicon(doc);
      },
      description: function () {
        var doc;
        doc = getParsedDoc.call(this, html);
        return null != this.description_ ? this.description_ : this.description_ = extractor.description(doc);
      },
      keywords: function () {
        var doc;
        doc = getParsedDoc.call(this, html);
        return null != this.keywords_ ? this.keywords_ : this.keywords_ = extractor.keywords(doc);
      },
      lang: function () {
        var doc;
        doc = getParsedDoc.call(this, html);
        return null != this.language_ ? this.language_ : this.language_ = language || extractor.lang(doc);
      },
      canonicalLink: function () {
        var doc;
        doc = getParsedDoc.call(this, html);
        return null != this.canonicalLink_ ? this.canonicalLink_ : this.canonicalLink_ = extractor.canonicalLink(doc);
      },
      tags: function () {
        var doc;
        doc = getParsedDoc.call(this, html);
        return null != this.tags_ ? this.tags_ : this.tags_ = extractor.tags(doc);
      },
      image: function () {
        var doc, url;
        doc = getParsedDoc.call(this, html);
        url = extractor.canonicalLink(doc) || extractor.favicon(doc);
        return null != this.image_ ? this.image_ : this.image_ = extractor.image(doc, url);
      },
      videos: function () {
        var doc, topNode;
        if (null != this.videos_)
          return this.videos_;
        doc = getCleanedDoc.call(this, html);
        topNode = getTopNode.call(this, doc, this.lang());
        return this.videos_ = extractor.videos(doc, topNode);
      },
      text: function () {
        var doc, topNode;
        if (null != this.text_)
          return this.text_;
        doc = getCleanedDoc.call(this, html);
        topNode = getTopNode.call(this, doc, this.lang());
        return this.text_ = extractor.text(doc, topNode, this.lang());
      }
    };
  };
  getParsedDoc = function (html) {
    return null != this.doc_ ? this.doc_ : this.doc_ = cheerio.load(html);
  };
  getTopNode = function (doc, lng) {
    return null != this.topNode_ ? this.topNode_ : this.topNode_ = extractor.calculateBestNode(doc, lng);
  };
  getCleanedDoc = function (html) {
    var doc;
    if (null != this.cleanedDoc_)
      return this.cleanedDoc_;
    doc = getParsedDoc.call(this, html);
    this.cleanedDoc_ = cleaner(doc);
    return this.cleanedDoc_;
  };
}.call(this);
